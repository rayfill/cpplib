
Thread オブジェクトの役割を明確にする

Thread: 

	スレッド。実行能力そのもの。派生してその生成、消滅、実行などに
	効率のパターンがうまれる。例: ThreadGroup, ThreadPoolなど

Mutex:

	排他制御。ロックを取得することでリソースへのアクセスを直列する。結
	果、所有権取得できるのはひとつのスレッドだけ。

CriticalSection:

	排他制御。Mutexより軽いのか?もしかするとWindowsにしかないのかもし
	れない。その場合はMutexのポリシーとして実装を選択できるようにした
	方がいいのかも。

Semaphore:

	侵入制御。排他制御をするという点ではMutexと変わらない。

Event:

	スレッド間通信。Windowsには*Event系APIが、pthreadの方は
	pthread_cond_*でなんとかなりそう。

その他:
	
	Win32はThread以外はロックハンドルが名前でlookupできる実装になって
	いる。ここまで実現しようとすると名前つきパイプとかでやる必要がある
	んだろうなぁ・・・できるんだろうか・・・もしくはDomain socketか?

	Windows側では結局APIをラップしてInterface を作るだけですむんだが、
	pthread側をどうするかが問題。Thread/Mutex/Eventはなんとかなるが、
	CriticalSection/Semaphoreは自力実装になってしまう・・・
	InterlockedInclementとかのインタフェースがあればCriticalSectionは
	実装できるはず・・・ただしWin32と違って名前lookupはできないだろう
	けど・・・
